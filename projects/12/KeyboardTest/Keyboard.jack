// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    //キーボードのメモリ
    static int kbd;

    /** Initializes the keyboard. */
    function void init() {
        //キーボードのメモリに直接アクセス可能とする
        let kbd = 24576;

        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     * この関数に関しては、主に他の関数内での呼び出し用となる。
     * while分のループの中で呼び出しが行われる
     */
    function char keyPressed() {
        //現在押されているキー
        var int current_key;

        //Memoryの24576にアクセスする。
        let current_key = Memory.peek(kbd);

        //キーボードがクリックされていない場合は、メモリに0が格納されている。
        if(current_key = 0){
            return 0;
        }else{
            return current_key;
        }
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        //カーソルの表示を行う(outputの内容かも)
        //多分これに関しては、printCharで行うべきものなのではないだろうか

        var int current_key;
        var int next_key;

        //現在のキーを獲得する
        let current_key = keyPressed();

        while(current_key = 0){
            //再度新しいキーの獲得を行う
            let current_key = keyPressed();
        }

        //キーがクリックされてから、続いてのキーを取得する
        let next_key = keyPressed();

        while(current_key = next_key){
            //再度新しいキーの獲得を行う
            let next_key = keyPressed();
        }

        //現在のカーソルの位置にcurrent_keyの出力をする
        //カーソルを右へ一つ移動する
        do Output.printChar(current_key);

        return current_key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String str;
        var int current_key;

        //空の文字列を用意する(enterがクリックされるまで蓄積される)
        let str = String.new(64);

        //メッセージをスクリーンに表示する
        do Output.printString(message);
        
        while(true){
            //現在の単一の文字列の取得をする
            let current_key = readChar();

            if(current_key = 128){
                //改行の出力？
                do Output.println();

                //空文字をreturnする
                return str;
            }else{
                if(current_key = 129){
                    //最後の文字列を削除する
                    do str.eraseLastChar(); //エラー原因は空の文字列に対してeraseLastCharを行おうとしているからかも

                    //カーソルを一つ前に戻す
                    do Output.backSpace();
                }else{
                    //単一文字列の追加を行う
                    let str = str.appendChar(current_key);
                }
            }
        }
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String str;
        var int current_key;
        var int intVal; 

        //String型の変数を用意する(最終的にint型に変換する予定)
        let str = String.new(64);

        //メッセージをスクリーンに表示する
        do Output.printString(message);
        
        while(true){
            //現在の単一の文字列の取得をする
            let current_key = readChar();

            if(current_key = 128){
                //改行の出力？
                do Output.println();

                //数値に変換後、returnする
                let intVal = str.intValue();
                return intVal;
            }else{
                if(current_key = 129){
                    //最後の文字列を削除する
                    do str.eraseLastChar();

                    //カーソルを一つ前に戻す
                    do Output.backSpace();
                }else{
                    //単一文字列の追加を行う
                    let str = str.appendChar(current_key);
                }
            }
        }
    }
}
