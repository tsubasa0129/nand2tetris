// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    //文字列を格納する配列
    field Array str;

    //最大文字数
    field int length;

    //現在参照している文字番号
    field int index;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }

        let str = Memory.alloc(maxLength);
        let length = maxLength;
        let index = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        //配列の破棄を行う
        do str.dispose();
        //オブジェクトの破棄を行う
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < length){
            return str[j];
        }else{
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < length){
            let str[j] = c;
        }
        
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(index < length){
            let str[index] = c;
            let index = index + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(index > 0){
            let str[index - 1] = 0;
            let index = index - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,d,v;
        var boolean neg; 

        let neg = false;
        let i = 0;
        let d = 0;
        let v = 0;

        //マイナスの処理
        if(str[i] = 45){
            let neg = true;
            let i = i + 1;
        }

        //数値を求める
        while((i < length) & (str[i] > 47) & (str[i] < 58)){
            let d = str[i] - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }

        //マイナスの付与
        if(neg){
            return (-1) * v;
        }else{
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i,lastDigit,middle;
        var String str_box;

        //初期値のリセットを行う
        let index = 0;
        let str_box = String.new(5);

        //"-"であった場合の処理
        if(val < 0){
            let val = -val;
            do appendChar(45);
        }

        //数的処理
        if(val < 10){
            //一桁であれば、数値に48を加算して,文字列に加える
            do appendChar(val + 48);
        }else{

            let i = 0;

            while(val > 0){
                //val % 10
                let middle = val / 10;
                let lastDigit = val - (middle * 10);

                do str_box.appendChar(lastDigit + 48);
                let val = val / 10;
                let i = i + 1;
            }

            while(i > 0){
                do appendChar(str_box.charAt(i - 1));
                let i = i - 1;
            }
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
