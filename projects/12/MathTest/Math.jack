// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int j,shiftedX,sum;

        let j = 0;
        let sum = 0;
        let shiftedX = x;

        while(j < 16){
            if(Math.bit(y,j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q,abs_x,abs_y,neg;
        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);

        if(x<0 | y < 0){
            if(x < 0 & y < 0){
                let neg = 1;
            }else{
                let neg = -1;
            }
        }else{
            let neg = 1;
        }
        
        if((abs_y > abs_x) | (abs_y < 0)){
            return 0;
        }
        
        let q = Math.divide(abs_x,2 * abs_y);

        if((abs_x - (2 * q * abs_y)) < abs_y){
            return neg * 2 * q;
        }else{
            return neg * ((2 * q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,midway;

        let y = 0;
        let j = 7;

        while(j > -1){
            let midway = ((y + twoToThe[j]) * (y + twoToThe[j]));

            if(~(midway > x) & (midway > 0)){
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a<b){
            return b;
        }else
        {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        else{
            return b;
        }
    }

    /** 整数xのj番目のbitが1であればtrueを返し、0であればfalseを返す */
    function boolean bit(int x,int i){
        if(~((x & twoToThe[i]) = 0)){
            return true;
        }else{
            return false;
        }
    }
}
