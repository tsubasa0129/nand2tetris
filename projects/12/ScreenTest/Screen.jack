// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array memory;
    static boolean black;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        //スクリーンのメモリマッピングを行う
        let memory = 16384;
        let black = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767 - 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;

        //メモリーのスクリーン対応部分を全て0にする
        while(i < 24575){
            do Memory.poke(i,0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        //変数blackを受け取ったboolean値に設定する
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int memoryVal,newValue;
        var int remain;
        var Array address;

        //メモリのアドレスとなる
        let address = (x / 16) + (32 * y) + 16384;

        //現在格納されているメモリの値
        let memoryVal = Memory.peek(address);

        //位置を取得し、その分シフト移動する
        let remain = x - ((x / 16) * 16);

        //シフト演算で求めた値と現在格納されているメモリの値を論理演算との間で論理演算を行う(多分whileでミスしているな)
        if(black){
            let newValue = memoryVal | twoToThe[remain];
        }else{
            let newValue = memoryVal & ~(twoToThe[remain]);
        }

        //メモリへの格納をする
        do Memory.poke(address,newValue);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        //ここから
        var int dx,dy;
        var int a,b;
        var int diff;
        var int da,db;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if(dy = 0){
            if(dx < 0){
                while(a > dx){
                    do Screen.drawPixel(x1 + a,y1);
                    let a = a - 1;
                }
            }else{
                while(a < dx){
                    do Screen.drawPixel(x1 + a,y1);
                    let a = a + 1;
                }
            }
        }

       if (dx < 0) {
            let da = -1;
            let dx = -dx;
        } else {
            let da = 1;
        }

        if (dy < 0) {
            let db = -1;
            let dy = -dy;
        } else {
            let db = 1;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        while((Math.abs(a) < (dx + 1)) & (Math.abs(b) < (dy + 1))){
            //書き込みを行う
            do Screen.drawPixel(x1 + a,y1 + b);

            if(dx = 0){
                let b = b + db;
            }else{
                if(diff > 0){
                    let b = b + db;
                    let diff = diff - dx;
                }else{
                    let a = a + da;
                    let diff = diff + dy;
                }
            }
        }
        

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int height;
        var int i;

        let height = y2 - y1;
        let i = 0;

        while(i < (height + 1)){
            do Screen.drawLine(x1,y1+i,x2,y1+i);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int sqrVal;
        var int dx,dy;

        let dy = -r;

        while(dy < (r + 1)){
            let dx = Math.sqrt((r * r) - (dy * dy)); 
            do Screen.drawLine(x - dx,y + dy,x + dx, y + dy);

            let dy = dy + 1;
        }

        return;
    }
}
