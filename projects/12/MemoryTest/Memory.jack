// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory,heap;
    static int freeList;
    static int block_size;
    static int block_next;

    /** Initializes the class. */
    function void init() {
        let memory = 0;

        let freeList = 2048;
        let heap = freeList;
        let heap[0] = 0; //nextのメモリ位置
        let heap[1] = 14335; //サイズ

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) { 
        var Array block;
        var Array ret_block;
        let heap = freeList;
        let block_next = heap[0];
        let block_size = heap[1];

        if(block_size > (size + 2)){
            let block = freeList + (block_size - size - 1);
            let block[0] = size + 1;

            let heap[1] = block_size - size - 1;

            return block + 1;
        }

        while(~(block_next = 0)){
            let block = heap[0];
            let block_next = block[0];
            let block_size = block[1];

            if(block_size > (size + 2)){
                let block_size = block_size - size - 1;
                let block[1] = block_size;
                let ret_block = heap + block_size;
                let ret_block[0] = size + 1;
                return ret_block + 1;
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        var Array next_block;

        let segment = o - 1;
        let segment[1] = segment[0];
        let segment[0] = 0;

        let next_block = freeList;
        while(~(next_block[0] = 0)){
            let next_block = next_block[0];
        }

        let next_block[0] = segment;
        return;
    }    
}
